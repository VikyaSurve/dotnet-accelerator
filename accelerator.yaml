accelerator:
  displayName: Tanzu .NET Web API
  iconUrl: https://iconape.com/wp-content/files/km/370669/svg/370669.svg
  tags:
  - C#
  - project
  options:
  - name: applicationName
    label: Application Name
    description: Application Name
    inputType: text
    defaultValue: DotnetAccelerator
    required: true
  - name: database
    dataType: string
    description: The type of database to use
    inputType: radio
    defaultValue: postgresql
    required: true
    choices:
    - value: postgresql
      text: PostgreSQL
    - value: mysql
      text: MySQL
  - name: configserver
    dataType: boolean
    description: Enable config server integration
    inputType: toggle
    defaultValue: true
    required: true
  - name: enableSecurity
    dataType: boolean
    description: Enable security via JWT resource server
    inputType: toggle
    defaultValue: true
    required: true
engine:
  let:
  - name: postgresql
    expression: (#database=="postgresql")
  - name: mysql
    expression: (#database=="mysql")
  merge:
  - include:
    - '**'
    exclude:
    - .template.config/**
    - src/DotnetAccelerator/Security/**
    - '**/*MySQL*'
    - '**/*PostgreSQL*'
  - include:
    - src/DotnetAccelerator/Security/**
    condition: '#enableSecurity'
  - include:
    - '**/*MySQL*'
    condition: '#mysql'
  - include:
    - '**/*PostgreSQL*'
    condition: '#postgresql'
  - include:
    - src/DotnetAccelerator/DotnetAccelerator.csproj
    chain:
    - type: ReplaceText
      condition: '!(#enableSecurity)'
      substitutions:
      - text: |2-
                  <!--#if enableSecurity -->
                  <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="5.0.10" />
                  <!--#endif -->
        with: "''"
    - type: ReplaceText
      condition: '#enableSecurity'
      substitutions:
      - text: |2-
                  <!--#if enableSecurity -->
                  <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="5.0.10" />
                  <!--#endif -->
        with: "'        <PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"5.0.10\" />'"
    - type: ReplaceText
      condition: '!(#postgresql)'
      substitutions:
      - text: |2-
                  <!--#if postgresql -->
                  <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="5.0.10" />
                  <!--#endif -->
        with: "''"
    - type: ReplaceText
      condition: '#postgresql'
      substitutions:
      - text: |2-
                  <!--#if postgresql -->
                  <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="5.0.10" />
                  <!--#endif -->
        with: "'        <PackageReference Include=\"Npgsql.EntityFrameworkCore.PostgreSQL\" Version=\"5.0.10\" />'"
    - type: ReplaceText
      condition: '!(#mysql)'
      substitutions:
      - text: |2-
                  <!--#if mysql -->
                  <PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="5.0.1" />
                  <!--#endif -->
        with: "''"
    - type: ReplaceText
      condition: '#mysql'
      substitutions:
      - text: |2-
                  <!--#if mysql -->
                  <PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="5.0.1" />
                  <!--#endif -->
        with: "'        <PackageReference Include=\"Pomelo.EntityFrameworkCore.MySql\" Version=\"5.0.1\" />'"
    - type: ReplaceText
      condition: '!(#configserver)'
      substitutions:
      - text: |2-
                  <!--#if configserver -->
                  <PackageReference Include="Steeltoe.Extensions.Configuration.ConfigServerCore" Version="3.1.1" />
                  <!--#endif -->
        with: "''"
    - type: ReplaceText
      condition: '#configserver'
      substitutions:
      - text: |2-
                  <!--#if configserver -->
                  <PackageReference Include="Steeltoe.Extensions.Configuration.ConfigServerCore" Version="3.1.1" />
                  <!--#endif -->
        with: "'        <PackageReference Include=\"Steeltoe.Extensions.Configuration.ConfigServerCore\" Version=\"3.1.1\" />'"
  - include:
    - src/DotnetAccelerator/Startup.cs
    chain:
    - type: ReplaceText
      condition: '!(#enableSecurity)'
      substitutions:
      - text: |
          #if enableSecurity
          using DotnetAccelerator.Security;
          using Microsoft.AspNetCore.Authentication.JwtBearer;
          #endif
        with: "''"
      - text: |
          #if enableSecurity
                      services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
                          .AddJwtBearer(cfg => Configuration.GetSection($"Authentication:{JwtBearerDefaults.AuthenticationScheme}").Bind(cfg));
                      services.AddAuthorization(authz =>
                      {
                          authz.AddPolicy(KnownAuthorizationPolicy.AirportRead, policy => policy.RequireClaim(KnownClaims.Read));
                          authz.AddPolicy(KnownAuthorizationPolicy.WeatherRead, policy => policy.RequireClaim(KnownClaims.Read));
                          authz.AddPolicy(KnownAuthorizationPolicy.WeatherWrite, policy => policy.RequireClaim(KnownClaims.Write));
                      });
          #endif
        with: "''"
      - text: |
          #if enableSecurity
                      app.UseAuthentication();
                      app.UseAuthorization();
          #endif
        with: "''"
    - type: ReplaceText
      condition: '#enableSecurity'
      substitutions:
      - text: |
          #if enableSecurity
          using DotnetAccelerator.Security;
          using Microsoft.AspNetCore.Authentication.JwtBearer;
          #endif
        with: |-
          'using DotnetAccelerator.Security;
          using Microsoft.AspNetCore.Authentication.JwtBearer;'
      - text: |
          #if enableSecurity
                      services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
                          .AddJwtBearer(cfg => Configuration.GetSection($"Authentication:{JwtBearerDefaults.AuthenticationScheme}").Bind(cfg));
                      services.AddAuthorization(authz =>
                      {
                          authz.AddPolicy(KnownAuthorizationPolicy.AirportRead, policy => policy.RequireClaim(KnownClaims.Read));
                          authz.AddPolicy(KnownAuthorizationPolicy.WeatherRead, policy => policy.RequireClaim(KnownClaims.Read));
                          authz.AddPolicy(KnownAuthorizationPolicy.WeatherWrite, policy => policy.RequireClaim(KnownClaims.Write));
                      });
          #endif
        with: |-
          '            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
                          .AddJwtBearer(cfg => Configuration.GetSection($"Authentication:{JwtBearerDefaults.AuthenticationScheme}").Bind(cfg));
                      services.AddAuthorization(authz =>
                      {
                          authz.AddPolicy(KnownAuthorizationPolicy.AirportRead, policy => policy.RequireClaim(KnownClaims.Read));
                          authz.AddPolicy(KnownAuthorizationPolicy.WeatherRead, policy => policy.RequireClaim(KnownClaims.Read));
                          authz.AddPolicy(KnownAuthorizationPolicy.WeatherWrite, policy => policy.RequireClaim(KnownClaims.Write));
                      });'
      - text: |
          #if enableSecurity
                      app.UseAuthentication();
                      app.UseAuthorization();
          #endif
        with: |-
          '            app.UseAuthentication();
                      app.UseAuthorization();'
    - type: ReplaceText
      condition: '!(#postgresql)'
      substitutions:
      - text: |
          #if postgresql
                              case DbType.PostgreSQL:
                                  opt.UseNpgsql(connectionString);
                                  break;
          #endif
        with: "''"
    - type: ReplaceText
      condition: '#postgresql'
      substitutions:
      - text: |
          #if postgresql
                              case DbType.PostgreSQL:
                                  opt.UseNpgsql(connectionString);
                                  break;
          #endif
        with: |-
          '                    case DbType.PostgreSQL:
                                  opt.UseNpgsql(connectionString);
                                  break;'
    - type: ReplaceText
      condition: '!(#mysql)'
      substitutions:
      - text: |
          #if mysql
                              case DbType.MySQL:
                                  opt.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString));
                                  break;
          #endif
        with: "''"
    - type: ReplaceText
      condition: '#mysql'
      substitutions:
      - text: |
          #if mysql
                              case DbType.MySQL:
                                  opt.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString));
                                  break;
          #endif
        with: |-
          '                    case DbType.MySQL:
                                  opt.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString));
                                  break;'
  - include:
    - src/DotnetAccelerator/Configuration/ConfigurationBuilderExtensions.cs
    chain:
    - type: ReplaceText
      condition: '!(#configserver)'
      substitutions:
      - text: |
          #if configserver
          using Steeltoe.Extensions.Configuration.ConfigServer;
          #endif
        with: "''"
      - text: |
          #if configserver
                          bootstrapConfigBuilder.AddEnvironmentVariables()
                          .AddCommandLine(Environment.GetCommandLineArgs())
                          .AddProfiles();
                          var bootstrapConfig = bootstrapConfigBuilder.Build();
                          var loggerFactory = LoggerFactory.Create(c => c.AddConfiguration(bootstrapConfig.GetSection("Logging")));
                          bootstrapConfigBuilder
                              .AddConfigServer(environment, loggerFactory);
          #endif
        with: "''"
    - type: ReplaceText
      condition: '#configserver'
      substitutions:
      - text: |
          #if configserver
          using Steeltoe.Extensions.Configuration.ConfigServer;
          #endif
        with: "'using Steeltoe.Extensions.Configuration.ConfigServer;'"
      - text: |
          #if configserver
                          bootstrapConfigBuilder.AddEnvironmentVariables()
                          .AddCommandLine(Environment.GetCommandLineArgs())
                          .AddProfiles();
                          var bootstrapConfig = bootstrapConfigBuilder.Build();
                          var loggerFactory = LoggerFactory.Create(c => c.AddConfiguration(bootstrapConfig.GetSection("Logging")));
                          bootstrapConfigBuilder
                              .AddConfigServer(environment, loggerFactory);
          #endif
        with: |-
          '                bootstrapConfigBuilder.AddEnvironmentVariables()
                          .AddCommandLine(Environment.GetCommandLineArgs())
                          .AddProfiles();
                          var bootstrapConfig = bootstrapConfigBuilder.Build();
                          var loggerFactory = LoggerFactory.Create(c => c.AddConfiguration(bootstrapConfig.GetSection("Logging")));
                          bootstrapConfigBuilder
                              .AddConfigServer(environment, loggerFactory);'
  - include:
    - src/DotnetAccelerator/Persistence/DbType.cs
    chain:
    - type: ReplaceText
      condition: '!(#postgresql)'
      substitutions:
      - text: |
          #if postgresql
                  PostgreSQL,
          #endif
        with: "''"
    - type: ReplaceText
      condition: '#postgresql'
      substitutions:
      - text: |
          #if postgresql
                  PostgreSQL,
          #endif
        with: "'        PostgreSQL,'"
    - type: ReplaceText
      condition: '!(#mysql)'
      substitutions:
      - text: |
          #if mysql
                  MySQL,
          #endif
        with: "''"
    - type: ReplaceText
      condition: '#mysql'
      substitutions:
      - text: |
          #if mysql
                  MySQL,
          #endif
        with: "'        MySQL,'"
  - include:
    - src/DotnetAccelerator/Modules/AirportModule/AirportController.cs
    chain:
    - type: ReplaceText
      condition: '!(#enableSecurity)'
      substitutions:
      - text: |
          #if enableSecurity
          using DotnetAccelerator.Security;
          #endif
        with: "''"
      - text: |
          #if enableSecurity
                  [Authorize(KnownAuthorizationPolicy.AirportRead)]
          #endif
        with: "''"
      - text: |
          #if enableSecurity
                  [Authorize(KnownAuthorizationPolicy.AirportRead)]
          #endif
        with: "''"
    - type: ReplaceText
      condition: '#enableSecurity'
      substitutions:
      - text: |
          #if enableSecurity
          using DotnetAccelerator.Security;
          #endif
        with: "'using DotnetAccelerator.Security;'"
      - text: |
          #if enableSecurity
                  [Authorize(KnownAuthorizationPolicy.AirportRead)]
          #endif
        with: "'        [Authorize(KnownAuthorizationPolicy.AirportRead)]'"
      - text: |
          #if enableSecurity
                  [Authorize(KnownAuthorizationPolicy.AirportRead)]
          #endif
        with: "'        [Authorize(KnownAuthorizationPolicy.AirportRead)]'"
  - include:
    - src/DotnetAccelerator/Modules/WeatherModule/WeatherController.cs
    chain:
    - type: ReplaceText
      condition: '!(#enableSecurity)'
      substitutions:
      - text: |
          #if enableSecurity
          using DotnetAccelerator.Security;
          #endif
        with: "''"
      - text: |
          #if enableSecurity
                  [Authorize(KnownAuthorizationPolicy.WeatherRead)]
          #endif
        with: "''"
      - text: |
          #if enableSecurity
                  [Authorize(KnownAuthorizationPolicy.WeatherRead)]
          #endif
        with: "''"
      - text: |
          #if enableSecurity
                  [Authorize(KnownAuthorizationPolicy.WeatherWrite)]
          #endif
        with: "''"
    - type: ReplaceText
      condition: '#enableSecurity'
      substitutions:
      - text: |
          #if enableSecurity
          using DotnetAccelerator.Security;
          #endif
        with: "'using DotnetAccelerator.Security;'"
      - text: |
          #if enableSecurity
                  [Authorize(KnownAuthorizationPolicy.WeatherRead)]
          #endif
        with: "'        [Authorize(KnownAuthorizationPolicy.WeatherRead)]'"
      - text: |
          #if enableSecurity
                  [Authorize(KnownAuthorizationPolicy.WeatherRead)]
          #endif
        with: "'        [Authorize(KnownAuthorizationPolicy.WeatherRead)]'"
      - text: |
          #if enableSecurity
                  [Authorize(KnownAuthorizationPolicy.WeatherWrite)]
          #endif
        with: "'        [Authorize(KnownAuthorizationPolicy.WeatherWrite)]'"

accelerator:
  displayName: Tanzu .NET Web API
  iconUrl: https://iconape.com/wp-content/files/km/370669/svg/370669.svg
  tags:
  - C#
  - project
  options:
  - name: database
    label: Database
    dataType: string
    description: The type of database to use
    inputType: radio
    defaultValue: postgresql
    required: true
    choices:
    - value: postgresql
      text: PostgreSQL
    - value: mysql
      text: MySQL
  - name: configserver
    label: Config Server
    dataType: boolean
    description: Enable config server integration
    inputType: toggle
    defaultValue: true
    required: true
  - name: enableSecurity
    label: Enable Security
    dataType: boolean
    description: Enable security via JWT resource server
    inputType: toggle
    defaultValue: true
    required: true
engine:
  let:
  - name: postgresql
    expression: (#database=="postgresql")
  - name: mysql
    expression: (#database=="mysql")
  merge:
  - include:
    - '**'
    exclude:
    - .template.config/**
    - src/DotnetAccelerator/Security/**
    - '**/*MySQL*'
    - '**/*PostgreSQL*'
  - include:
    - src/DotnetAccelerator/Security/**
    condition: '#enableSecurity'
  - include:
    - '**/*MySQL*'
    condition: '#mysql'
  - include:
    - '**/*PostgreSQL*'
    condition: '#postgresql'
  - include:
    - src/DotnetAccelerator/DotnetAccelerator.csproj
    chain:
    - type: ReplaceText
      substitutions:
      - text: |2-
                  <!--#if enableSecurity -->
                  <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="5.0.10" />
                  <!--#endif -->
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |2-
                  <!--#if enableSecurity -->
                  <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="5.0.10" />
                  <!--#endif -->
        with: "'        <PackageReference Include=\"Microsoft.AspNetCore.Authentication.JwtBearer\" Version=\"5.0.10\" />'"
      condition: '#enableSecurity'
    - type: ReplaceText
      substitutions:
      - text: |2-
                  <!--#if postgresql -->
                  <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="5.0.10" />
                  <!--#endif -->
        with: "''"
      condition: '!(#postgresql)'
    - type: ReplaceText
      substitutions:
      - text: |2-
                  <!--#if postgresql -->
                  <PackageReference Include="Npgsql.EntityFrameworkCore.PostgreSQL" Version="5.0.10" />
                  <!--#endif -->
        with: "'        <PackageReference Include=\"Npgsql.EntityFrameworkCore.PostgreSQL\" Version=\"5.0.10\" />'"
      condition: '#postgresql'
    - type: ReplaceText
      substitutions:
      - text: |2-
                  <!--#if mysql -->
                  <PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="5.0.1" />
                  <!--#endif -->
        with: "''"
      condition: '!(#mysql)'
    - type: ReplaceText
      substitutions:
      - text: |2-
                  <!--#if mysql -->
                  <PackageReference Include="Pomelo.EntityFrameworkCore.MySql" Version="5.0.1" />
                  <!--#endif -->
        with: "'        <PackageReference Include=\"Pomelo.EntityFrameworkCore.MySql\" Version=\"5.0.1\" />'"
      condition: '#mysql'
    - type: ReplaceText
      substitutions:
      - text: |2-
                  <!--#if configserver -->
                  <PackageReference Include="Steeltoe.Extensions.Configuration.ConfigServerCore" Version="3.1.1" />
                  <!--#endif -->
        with: "''"
      condition: '!(#configserver)'
    - type: ReplaceText
      substitutions:
      - text: |2-
                  <!--#if configserver -->
                  <PackageReference Include="Steeltoe.Extensions.Configuration.ConfigServerCore" Version="3.1.1" />
                  <!--#endif -->
        with: "'        <PackageReference Include=\"Steeltoe.Extensions.Configuration.ConfigServerCore\" Version=\"3.1.1\" />'"
      condition: '#configserver'
  - include:
    - config/application-Development.yaml
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io
          #endif
        with: |-
          'Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io'
      condition: '#enableSecurity'
  - include:
    - config/application.yaml
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://accounts.google.com
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://accounts.google.com
          #endif
        with: |-
          'Authentication:
            Bearer:
              Authority: https://accounts.google.com'
      condition: '#enableSecurity'
  - include:
    - src/DotnetAccelerator/Startup.cs
    chain:
    - type: ReplaceText
      substitutions:
      - text: |
          #if enableSecurity
          using DotnetAccelerator.Security;
          using Microsoft.AspNetCore.Authentication.JwtBearer;
          #endif
        with: "''"
      - text: |
          #if enableSecurity
                      services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
                          .AddJwtBearer(cfg => Configuration.GetSection($"Authentication:{JwtBearerDefaults.AuthenticationScheme}").Bind(cfg));
                      services.AddAuthorization(authz =>
                      {
                          authz.AddPolicy(KnownAuthorizationPolicy.AirportRead, policy => policy.RequireClaim(KnownClaims.Read));
                          authz.AddPolicy(KnownAuthorizationPolicy.WeatherRead, policy => policy.RequireClaim(KnownClaims.Read));
                          authz.AddPolicy(KnownAuthorizationPolicy.WeatherWrite, policy => policy.RequireClaim(KnownClaims.Write));
                      });
          #endif
        with: "''"
      - text: |
          #if enableSecurity
                      app.UseAuthentication();
                      app.UseAuthorization();
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |
          #if enableSecurity
          using DotnetAccelerator.Security;
          using Microsoft.AspNetCore.Authentication.JwtBearer;
          #endif
        with: |-
          'using DotnetAccelerator.Security;
          using Microsoft.AspNetCore.Authentication.JwtBearer;'
      - text: |
          #if enableSecurity
                      services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
                          .AddJwtBearer(cfg => Configuration.GetSection($"Authentication:{JwtBearerDefaults.AuthenticationScheme}").Bind(cfg));
                      services.AddAuthorization(authz =>
                      {
                          authz.AddPolicy(KnownAuthorizationPolicy.AirportRead, policy => policy.RequireClaim(KnownClaims.Read));
                          authz.AddPolicy(KnownAuthorizationPolicy.WeatherRead, policy => policy.RequireClaim(KnownClaims.Read));
                          authz.AddPolicy(KnownAuthorizationPolicy.WeatherWrite, policy => policy.RequireClaim(KnownClaims.Write));
                      });
          #endif
        with: |-
          '            services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
                          .AddJwtBearer(cfg => Configuration.GetSection($"Authentication:{JwtBearerDefaults.AuthenticationScheme}").Bind(cfg));
                      services.AddAuthorization(authz =>
                      {
                          authz.AddPolicy(KnownAuthorizationPolicy.AirportRead, policy => policy.RequireClaim(KnownClaims.Read));
                          authz.AddPolicy(KnownAuthorizationPolicy.WeatherRead, policy => policy.RequireClaim(KnownClaims.Read));
                          authz.AddPolicy(KnownAuthorizationPolicy.WeatherWrite, policy => policy.RequireClaim(KnownClaims.Write));
                      });'
      - text: |
          #if enableSecurity
                      app.UseAuthentication();
                      app.UseAuthorization();
          #endif
        with: |-
          '            app.UseAuthentication();
                      app.UseAuthorization();'
      condition: '#enableSecurity'
    - type: ReplaceText
      substitutions:
      - text: |
          #if postgresql
                              case DbType.PostgreSQL:
                                  opt.UseNpgsql(connectionString);
                                  break;
          #endif
        with: "''"
      condition: '!(#postgresql)'
    - type: ReplaceText
      substitutions:
      - text: |
          #if postgresql
                              case DbType.PostgreSQL:
                                  opt.UseNpgsql(connectionString);
                                  break;
          #endif
        with: |-
          '                    case DbType.PostgreSQL:
                                  opt.UseNpgsql(connectionString);
                                  break;'
      condition: '#postgresql'
    - type: ReplaceText
      substitutions:
      - text: |
          #if mysql
                              case DbType.MySQL:
                                  opt.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString));
                                  break;
          #endif
        with: "''"
      condition: '!(#mysql)'
    - type: ReplaceText
      substitutions:
      - text: |
          #if mysql
                              case DbType.MySQL:
                                  opt.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString));
                                  break;
          #endif
        with: |-
          '                    case DbType.MySQL:
                                  opt.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString));
                                  break;'
      condition: '#mysql'
  - include:
    - src/DotnetAccelerator/Configuration/ConfigurationBuilderExtensions.cs
    chain:
    - type: ReplaceText
      substitutions:
      - text: |
          #if configserver
          using Steeltoe.Extensions.Configuration.ConfigServer;
          #endif
        with: "''"
      - text: |
          #if configserver
                          bootstrapConfigBuilder.AddEnvironmentVariables()
                          .AddCommandLine(Environment.GetCommandLineArgs())
                          .AddProfiles();
                          var bootstrapConfig = bootstrapConfigBuilder.Build();
                          var loggerFactory = LoggerFactory.Create(c => c.AddConfiguration(bootstrapConfig.GetSection("Logging")));
                          bootstrapConfigBuilder
                              .AddConfigServer(environment, loggerFactory);
          #endif
        with: "''"
      condition: '!(#configserver)'
    - type: ReplaceText
      substitutions:
      - text: |
          #if configserver
          using Steeltoe.Extensions.Configuration.ConfigServer;
          #endif
        with: "'using Steeltoe.Extensions.Configuration.ConfigServer;'"
      - text: |
          #if configserver
                          bootstrapConfigBuilder.AddEnvironmentVariables()
                          .AddCommandLine(Environment.GetCommandLineArgs())
                          .AddProfiles();
                          var bootstrapConfig = bootstrapConfigBuilder.Build();
                          var loggerFactory = LoggerFactory.Create(c => c.AddConfiguration(bootstrapConfig.GetSection("Logging")));
                          bootstrapConfigBuilder
                              .AddConfigServer(environment, loggerFactory);
          #endif
        with: |-
          '                bootstrapConfigBuilder.AddEnvironmentVariables()
                          .AddCommandLine(Environment.GetCommandLineArgs())
                          .AddProfiles();
                          var bootstrapConfig = bootstrapConfigBuilder.Build();
                          var loggerFactory = LoggerFactory.Create(c => c.AddConfiguration(bootstrapConfig.GetSection("Logging")));
                          bootstrapConfigBuilder
                              .AddConfigServer(environment, loggerFactory);'
      condition: '#configserver'
  - include:
    - src/DotnetAccelerator/bin/Debug/net5.0/config/solution-defaults.Development.yaml
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io
          #endif
        with: |-
          'Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io'
      condition: '#enableSecurity'
  - include:
    - src/DotnetAccelerator/bin/Debug/net5.0/config/solution-defaults.yaml
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://accounts.google.com
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://accounts.google.com
          #endif
        with: |-
          'Authentication:
            Bearer:
              Authority: https://accounts.google.com'
      condition: '#enableSecurity'
  - include:
    - src/DotnetAccelerator/Properties/launchSettings.json
    chain:
    - type: ReplaceText
      substitutions:
      - text: |
          //#if postgresql
              "DotnetAccelerator - PostgreSQL: ": {
                "commandName": "Project",
                "dotnetRunMessages": "true",
                "launchBrowser": true,
                "launchUrl": "swagger",
                "applicationUrl": "https://localhost:5001;http://localhost:5000",
                "environmentVariables": {
                  "ASPNETCORE_ENVIRONMENT": "Development",
                  "PROFILES:ACTIVE": "LocalMySQL"
                }
              },
          //#endif
        with: "''"
      condition: '!(#postgresql)'
    - type: ReplaceText
      substitutions:
      - text: |
          //#if postgresql
              "DotnetAccelerator - PostgreSQL: ": {
                "commandName": "Project",
                "dotnetRunMessages": "true",
                "launchBrowser": true,
                "launchUrl": "swagger",
                "applicationUrl": "https://localhost:5001;http://localhost:5000",
                "environmentVariables": {
                  "ASPNETCORE_ENVIRONMENT": "Development",
                  "PROFILES:ACTIVE": "LocalMySQL"
                }
              },
          //#endif
        with: |-
          '    "DotnetAccelerator - PostgreSQL: ": {
                "commandName": "Project",
                "dotnetRunMessages": "true",
                "launchBrowser": true,
                "launchUrl": "swagger",
                "applicationUrl": "https://localhost:5001;http://localhost:5000",
                "environmentVariables": {
                  "ASPNETCORE_ENVIRONMENT": "Development",
                  "PROFILES:ACTIVE": "LocalMySQL"
                }
              },'
      condition: '#postgresql'
    - type: ReplaceText
      substitutions:
      - text: |
          //#if mysql
              "DotnetAccelerator - MySQL: ": {
                "commandName": "Project",
                "dotnetRunMessages": "true",
                "launchBrowser": true,
                "launchUrl": "swagger",
                "applicationUrl": "https://localhost:5001;http://localhost:5000",
                "environmentVariables": {
                  "ASPNETCORE_ENVIRONMENT": "Development",
                  "PROFILES:ACTIVE": "LocalMySQL"
                }
              },
          //#endif
        with: "''"
      condition: '!(#mysql)'
    - type: ReplaceText
      substitutions:
      - text: |
          //#if mysql
              "DotnetAccelerator - MySQL: ": {
                "commandName": "Project",
                "dotnetRunMessages": "true",
                "launchBrowser": true,
                "launchUrl": "swagger",
                "applicationUrl": "https://localhost:5001;http://localhost:5000",
                "environmentVariables": {
                  "ASPNETCORE_ENVIRONMENT": "Development",
                  "PROFILES:ACTIVE": "LocalMySQL"
                }
              },
          //#endif
        with: |-
          '    "DotnetAccelerator - MySQL: ": {
                "commandName": "Project",
                "dotnetRunMessages": "true",
                "launchBrowser": true,
                "launchUrl": "swagger",
                "applicationUrl": "https://localhost:5001;http://localhost:5000",
                "environmentVariables": {
                  "ASPNETCORE_ENVIRONMENT": "Development",
                  "PROFILES:ACTIVE": "LocalMySQL"
                }
              },'
      condition: '#mysql'
  - include:
    - src/DotnetAccelerator/Persistence/DbType.cs
    chain:
    - type: ReplaceText
      substitutions:
      - text: |
          #if postgresql
                  PostgreSQL,
          #endif
        with: "''"
      condition: '!(#postgresql)'
    - type: ReplaceText
      substitutions:
      - text: |
          #if postgresql
                  PostgreSQL,
          #endif
        with: "'        PostgreSQL,'"
      condition: '#postgresql'
    - type: ReplaceText
      substitutions:
      - text: |
          #if mysql
                  MySQL,
          #endif
        with: "''"
      condition: '!(#mysql)'
    - type: ReplaceText
      substitutions:
      - text: |
          #if mysql
                  MySQL,
          #endif
        with: "'        MySQL,'"
      condition: '#mysql'
  - include:
    - tests/DotnetAcceleratorTests/bin/Debug/net5.0/config/solution-defaults.Development.yaml
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io
          #endif
        with: |-
          'Authentication:
            Bearer:
              Authority: https://login.run.pcfone.io'
      condition: '#enableSecurity'
  - include:
    - tests/DotnetAcceleratorTests/bin/Debug/net5.0/config/solution-defaults.yaml
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://accounts.google.com
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://accounts.google.com
          #endif
        with: |-
          'Authentication:
            Bearer:
              Authority: https://accounts.google.com'
      condition: '#enableSecurity'
  - include:
    - src/DotnetAccelerator/Modules/AirportModule/AirportController.cs
    chain:
    - type: ReplaceText
      substitutions:
      - text: |
          #if enableSecurity
          using DotnetAccelerator.Security;
          #endif
        with: "''"
      - text: |
          #if enableSecurity
                  [Authorize(KnownAuthorizationPolicy.AirportRead)]
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |
          #if enableSecurity
          using DotnetAccelerator.Security;
          #endif
        with: "'using DotnetAccelerator.Security;'"
      - text: |
          #if enableSecurity
                  [Authorize(KnownAuthorizationPolicy.AirportRead)]
          #endif
        with: "'        [Authorize(KnownAuthorizationPolicy.AirportRead)]'"
      condition: '#enableSecurity'
  - include:
    - src/DotnetAccelerator/bin/Debug/net5.0/publish/config/solution-defaults.yaml
    chain:
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://accounts.google.com
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |-
          #if enableSecurity
          Authentication:
            Bearer:
              Authority: https://accounts.google.com
          #endif
        with: |-
          'Authentication:
            Bearer:
              Authority: https://accounts.google.com'
      condition: '#enableSecurity'
  - include:
    - src/DotnetAccelerator/Modules/WeatherModule/WeatherController.cs
    chain:
    - type: ReplaceText
      substitutions:
      - text: |
          #if enableSecurity
          using DotnetAccelerator.Security;
          #endif
        with: "''"
      - text: |
          #if enableSecurity
                  [Authorize(KnownAuthorizationPolicy.WeatherRead)]
          #endif
        with: "''"
      - text: |
          #if enableSecurity
                  [Authorize(KnownAuthorizationPolicy.WeatherWrite)]
          #endif
        with: "''"
      condition: '!(#enableSecurity)'
    - type: ReplaceText
      substitutions:
      - text: |
          #if enableSecurity
          using DotnetAccelerator.Security;
          #endif
        with: "'using DotnetAccelerator.Security;'"
      - text: |
          #if enableSecurity
                  [Authorize(KnownAuthorizationPolicy.WeatherRead)]
          #endif
        with: "'        [Authorize(KnownAuthorizationPolicy.WeatherRead)]'"
      - text: |
          #if enableSecurity
                  [Authorize(KnownAuthorizationPolicy.WeatherWrite)]
          #endif
        with: "'        [Authorize(KnownAuthorizationPolicy.WeatherWrite)]'"
      condition: '#enableSecurity'
  chain:
  - type: RewritePath
    regex: DotnetAccelerator.sln
    rewriteTo: "'' + #artifactId + '.sln'"
  - type: RewritePath
    regex: config/DotnetAccelerator-Development.yaml
    rewriteTo: "'config/' + #artifactId + '-Development.yaml'"
  - type: RewritePath
    regex: config/DotnetAccelerator-LocalMySQL.yaml
    rewriteTo: "'config/' + #artifactId + '-LocalMySQL.yaml'"
  - type: RewritePath
    regex: config/DotnetAccelerator-LocalPostgreSQL.yaml
    rewriteTo: "'config/' + #artifactId + '-LocalPostgreSQL.yaml'"
  - type: RewritePath
    regex: config/DotnetAccelerator.yaml
    rewriteTo: "'config/' + #artifactId + '.yaml'"
  - type: RewritePath
    regex: src/DotnetAccelerator/DotnetAccelerator.csproj
    rewriteTo: "'src/' + #artifactId + '/' + #artifactId + '.csproj'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Program.cs
    rewriteTo: "'src/' + #artifactId + '/Program.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/README.md
    rewriteTo: "'src/' + #artifactId + '/README.md'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Startup.cs
    rewriteTo: "'src/' + #artifactId + '/Startup.cs'"
  - type: RewritePath
    regex: tests/DotnetAcceleratorTests/DotnetAcceleratorTests.csproj
    rewriteTo: "'tests/' + #artifactId + 'Tests/' + #artifactId + 'Tests.csproj'"
  - type: RewritePath
    regex: tests/DotnetAcceleratorTests/IUseDbContext.cs
    rewriteTo: "'tests/' + #artifactId + 'Tests/IUseDbContext.cs'"
  - type: RewritePath
    regex: tests/DotnetAcceleratorTests/WeatherTests.cs
    rewriteTo: "'tests/' + #artifactId + 'Tests/WeatherTests.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Configuration/ConfigurationBuilderExtensions.cs
    rewriteTo: "'src/' + #artifactId + '/Configuration/ConfigurationBuilderExtensions.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Configuration/ServiceCollectionExtensions.cs
    rewriteTo: "'src/' + #artifactId + '/Configuration/ServiceCollectionExtensions.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Messaging/IMessageBus.cs
    rewriteTo: "'src/' + #artifactId + '/Messaging/IMessageBus.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Messaging/MessageBus.cs
    rewriteTo: "'src/' + #artifactId + '/Messaging/MessageBus.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Modules/DomainException.cs
    rewriteTo: "'src/' + #artifactId + '/Modules/DomainException.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Modules/DomainExceptionFilter.cs
    rewriteTo: "'src/' + #artifactId + '/Modules/DomainExceptionFilter.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Persistence/DbType.cs
    rewriteTo: "'src/' + #artifactId + '/Persistence/DbType.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Persistence/DotnetAcceleratorContext.cs
    rewriteTo: "'src/' + #artifactId + '/Persistence/' + #artifactId + 'Context.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Properties/launchSettings.json
    rewriteTo: "'src/' + #artifactId + '/Properties/launchSettings.json'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Security/KnownAuthorizationPolicy.cs
    rewriteTo: "'src/' + #artifactId + '/Security/KnownAuthorizationPolicy.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Security/KnownClaims.cs
    rewriteTo: "'src/' + #artifactId + '/Security/KnownClaims.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Modules/AirportModule/AirportController.cs
    rewriteTo: "'src/' + #artifactId + '/Modules/AirportModule/AirportController.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Modules/WeatherModule/WeatherController.cs
    rewriteTo: "'src/' + #artifactId + '/Modules/WeatherModule/WeatherController.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Modules/AirportModule/Domain/Models/Airport.cs
    rewriteTo: "'src/' + #artifactId + '/Modules/AirportModule/Domain/Models/Airport.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Modules/AirportModule/Domain/Models/AirportQuery.cs
    rewriteTo: "'src/' + #artifactId + '/Modules/AirportModule/Domain/Models/AirportQuery.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Modules/AirportModule/Domain/Models/AirportQuery.MediatR.cs
    rewriteTo: "'src/' + #artifactId + '/Modules/AirportModule/Domain/Models/AirportQuery.MediatR.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Modules/AirportModule/Domain/Services/AirportService.cs
    rewriteTo: "'src/' + #artifactId + '/Modules/AirportModule/Domain/Services/AirportService.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Modules/AirportModule/Domain/Services/AirportService.Handlers.cs
    rewriteTo: "'src/' + #artifactId + '/Modules/AirportModule/Domain/Services/AirportService.Handlers.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Modules/WeatherModule/Domain/Models/WeatherForecast.cs
    rewriteTo: "'src/' + #artifactId + '/Modules/WeatherModule/Domain/Models/WeatherForecast.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Modules/WeatherModule/Domain/Models/WeatherForecast.MediatR.cs
    rewriteTo: "'src/' + #artifactId + '/Modules/WeatherModule/Domain/Models/WeatherForecast.MediatR.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Modules/WeatherModule/Domain/Models/WeatherForecastQuery.cs
    rewriteTo: "'src/' + #artifactId + '/Modules/WeatherModule/Domain/Models/WeatherForecastQuery.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Modules/WeatherModule/Domain/Models/WeatherForecastQuery.MediatR.cs
    rewriteTo: "'src/' + #artifactId + '/Modules/WeatherModule/Domain/Models/WeatherForecastQuery.MediatR.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Modules/WeatherModule/Domain/Services/WeatherService.cs
    rewriteTo: "'src/' + #artifactId + '/Modules/WeatherModule/Domain/Services/WeatherService.cs'"
  - type: RewritePath
    regex: src/DotnetAccelerator/Modules/WeatherModule/Domain/Services/WeatherService.Handlers.cs
    rewriteTo: "'src/' + #artifactId + '/Modules/WeatherModule/Domain/Services/WeatherService.Handlers.cs'"
  - type: ReplaceText
    substitutions:
    - text: DotnetAccelerator
      with: '#artifactId'
